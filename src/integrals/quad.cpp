#include "quad.h"

//currently available:
// 2,3,4,5,6,8,12,16,24 point Gaussian quadratures

#pragma acc routine seq
double ps_dV(double mu1, double mu2, double nu1, double nu2);

void two_point_quad(double* Qi)
{
 double Q[2][2] = {
 {0.211324865405187, 0.500000000000000},
 {0.788675134594813, 0.500000000000000}
 };

 for (int i=0;i<2;i++)
 for (int j=0;j<2;j++)
   Qi[i*2+j] = Q[i][j];

  return;
}

void three_point_quad(double* Qi)
{
 double Q[3][2] = {
 {0.112701665379258, 0.277777777777778},
 {0.500000000000000, 0.444444444444444},
 {0.887298334620742, 0.277777777777778}
 };

 for (int i=0;i<3;i++)
 for (int j=0;j<2;j++)
   Qi[i*2+j] = Q[i][j];

 return;
}

void four_point_quad(double* Qi)
{
 double Q[4][2] = {
 {0.0694318442029737, 0.173927422568727},
 {0.330009478207572, 0.326072577431273},
 {0.669990521792428, 0.326072577431273},
 {0.930568155797026, 0.173927422568727}
 };

 for (int i=0;i<4;i++)
 for (int j=0;j<2;j++)
   Qi[i*2+j] = Q[i][j];

 return;
}

void five_point_quad(double* Qi)
{
 double Q[5][2] = {
 {0.0469100770306680, 0.118463442528095},
 {0.230765344947158, 0.239314335249683},
 {0.500000000000000, 0.284444444444444},
 {0.769234655052842, 0.239314335249683},
 {0.953089922969332, 0.118463442528095}
 };

 for (int i=0;i<5;i++)
 for (int j=0;j<2;j++)
   Qi[i*2+j] = Q[i][j];

 return;
}

void six_point_quad(double* Qi)
{
 double Q[6][2] = {
 {0.0337652428984240, 0.0856622461895852},
 {0.169395306766868, 0.180380786524069},
 {0.380690406958402, 0.233956967286346},
 {0.619309593041598, 0.233956967286346},
 {0.830604693233132, 0.180380786524069},
 {0.966234757101576, 0.0856622461895852}
 };

 for (int i=0;i<6;i++)
 for (int j=0;j<2;j++)
   Qi[i*2+j] = Q[i][j];

 return;
}

void eight_point_quad(double* Qi)
{
 double Q[8][2] = {
 {0.0198550717512319, 0.0506142681451881},
 {0.101666761293187, 0.111190517226687},
 {0.237233795041836, 0.156853322938944},
 {0.408282678752175, 0.181341891689181},
 {0.591717321247825, 0.181341891689181},
 {0.762766204958164, 0.156853322938944},
 {0.898333238706813, 0.111190517226687},
 {0.980144928248768, 0.0506142681451881}
 };

 for (int i=0;i<8;i++)
 for (int j=0;j<2;j++)
   Qi[i*2+j] = Q[i][j];

 return;
}

void ten_point_quad(double* Qi)
{
 double Q[10][2] = {
 {0.0130467357414141, 0.0333356721543441},
 {0.0674683166555077, 0.0747256745752903},
 {0.160295215850488, 0.109543181257991},
 {0.283302302935376, 0.134633359654998},
 {0.425562830509184, 0.147762112357376},
 {0.574437169490816, 0.147762112357376},
 {0.716697697064624, 0.134633359654998},
 {0.839704784149512, 0.109543181257991},
 {0.932531683344492, 0.0747256745752903},
 {0.986953264258586, 0.0333356721543441}
 };

 for (int i=0;i<10;i++)
 for (int j=0;j<2;j++)
   Qi[i*2+j] = Q[i][j];
}

void twelve_point_quad(double* Qi)
{
 double Q[12][2] = {
 {0.00921968287664037, 0.0235876681932559},
 {0.0479413718147626, 0.0534696629976592},
 {0.115048662902848, 0.0800391642716731},
 {0.206341022856691, 0.101583713361533},
 {0.316084250500910, 0.116746268269177},
 {0.437383295744266, 0.124573522906701},
 {0.562616704255734, 0.124573522906701},
 {0.683915749499090, 0.116746268269177},
 {0.793658977143309, 0.101583713361533},
 {0.884951337097152, 0.0800391642716731},
 {0.952058628185237, 0.0534696629976592},
 {0.990780317123360, 0.0235876681932559}
 };

 for (int i=0;i<12;i++)
 for (int j=0;j<2;j++)
   Qi[i*2+j] = Q[i][j];
}

void sixteen_point_quad(double* Qi)
{
  double Q[16][2] = {
 {0.00529953250417503, 0.0135762297058770},
 {0.0277124884633837, 0.0311267619693239},
 {0.0671843988060841, 0.0475792558412464},
 {0.122297795822498, 0.0623144856277669},
 {0.191061877798678, 0.0747979944082884},
 {0.270991611171386, 0.0845782596975013},
 {0.359198224610371, 0.0913017075224618},
 {0.452493745081181, 0.0947253052275342},
 {0.547506254918819, 0.0947253052275342},
 {0.640801775389629, 0.0913017075224618},
 {0.729008388828614, 0.0845782596975013},
 {0.808938122201322, 0.0747979944082884},
 {0.877702204177502, 0.0623144856277669},
 {0.932815601193916, 0.0475792558412464},
 {0.972287511536616, 0.0311267619693239},
 {0.994700467495825, 0.0135762297058770}
 };
 for (int i=0;i<16;i++)
 for (int j=0;j<2;j++)
   Qi[i*2+j] = Q[i][j];
}

void twenty_four_point_quad(double* Qi)
{
  double Q[24][2] = {
  {0.00240639000148932, 0.00617061489999360},
  {0.0126357220143453, 0.0142656943144668},
  {0.0308627239986336, 0.0221387194087099},
  {0.0567922364977995, 0.0296492924577184},
  {0.0899990070130485, 0.0366732407055402},
  {0.129937904210723, 0.0430950807659766},
  {0.175953174031512, 0.0488093260520569},
  {0.227289264305580, 0.0537221350579828},
  {0.283103246186977, 0.0577528340268628},
  {0.342478660151918, 0.0608352364639017},
  {0.404440566263192, 0.0629187281734141},
  {0.467971553568697, 0.0639690976733761},
  {0.532028446431303, 0.0639690976733761},
  {0.595559433736808, 0.0629187281734141},
  {0.657521339848082, 0.0608352364639017},
  {0.716896753813023, 0.0577528340268628},
  {0.772710735694420, 0.0537221350579828},
  {0.824046825968488, 0.0488093260520569},
  {0.870062095789277, 0.0430950807659766},
  {0.910000992986951, 0.0366732407055402},
  {0.943207763502201, 0.0296492924577184},
  {0.969137276001366, 0.0221387194087099},
  {0.987364277985655, 0.0142656943144668},
  {0.997593609998511, 0.00617061489999360}
  };
  for (int i=0;i<24;i++)
  for (int j=0;j<2;j++)
    Qi[i*2+j] = Q[i][j];
}

void thirty_two_point_quad(double* Qi)
{
  double Q[32][2] = {
 {0.00136806907525922, 0.00350930500473505},
 {0.00719424422736583, 0.00813719736545284},
 {0.0176188722062468, 0.0126960326546310},
 {0.0325469620311302, 0.0171369314565107},
 {0.0518394221169739, 0.0214179490111133},
 {0.0753161931337150, 0.0254990296311881},
 {0.102758102016029, 0.0293420467392678},
 {0.133908940629855, 0.0329111113881809},
 {0.168477866534892, 0.0361728970544243},
 {0.206142121379619, 0.0390969478935352},
 {0.246550045533885, 0.0416559621134734},
 {0.289324361934682, 0.0438260465022019},
 {0.334065698858936, 0.0455869393478819},
 {0.380356318873931, 0.0469221995404023},
 {0.427764019208602, 0.0478193600396374},
 {0.475846167156131, 0.0482700442573639},
 {0.524153832843869, 0.0482700442573639},
 {0.572235980791398, 0.0478193600396374},
 {0.619643681126069, 0.0469221995404023},
 {0.665934301141064, 0.0455869393478819},
 {0.710675638065318, 0.0438260465022019},
 {0.753449954466115, 0.0416559621134734},
 {0.793857878620381, 0.0390969478935352},
 {0.831522133465108, 0.0361728970544243},
 {0.866091059370145, 0.0329111113881809},
 {0.897241897983971, 0.0293420467392678},
 {0.924683806866285, 0.0254990296311881},
 {0.948160577883026, 0.0214179490111133},
 {0.967453037968870, 0.0171369314565107},
 {0.982381127793753, 0.0126960326546310},
 {0.992805755772634, 0.00813719736545284},
 {0.998631930924741, 0.00350930500473505}
 };

  for (int i=0;i<32;i++)
  for (int j=0;j<2;j++)
    Qi[i*2+j] = Q[i][j];

  return;
}

void forty_eight_point_quad(double* Qi)
{
  double Q[48][2] = {
 {0.00061449637379, 0.00157667302615292},
 {0.00323491386682, 0.00366377695063813},
 {0.00793770813859, 0.0057386172896174},
 {0.01470420372688, 0.0077896578614719},
 {0.02350614841978, 0.0098080802286778},
 {0.03430665464672, 0.0117853804196622},
 {0.04706043164222, 0.0137132548541791},
 {0.06171398986288, 0.0155836139163990},
 {0.07820586918780, 0.0173886112823852},
 {0.09646689798528, 0.0191206755329182},
 {0.11642048374213, 0.0207725414717332},
 {0.13798293453809, 0.0223372804283474},
 {0.16106381018367, 0.0238083292462453},
 {0.18556630161174, 0.0251795177769273},
 {0.21138763695801, 0.0264450947425968},
 {0.23841951263888, 0.0275997518499921},
 {0.26654854762452, 0.0286386460502016},
 {0.29565675900464, 0.0295574198491978},
 {0.32562205685392, 0.0303522195829469},
 {0.35631875632227, 0.0310197115799463},
 {0.38761810480266, 0.0315570961431270},
 {0.41938882196555, 0.0319621192923241},
 {0.45149765039527, 0.0322330822179750},
 {0.48380991451857, 0.0323688484063420},
 {0.51619008548143, 0.0323688484063420},
 {0.54850234960473, 0.0322330822179750},
 {0.58061117803445, 0.0319621192923241},
 {0.61238189519734, 0.0315570961431270},
 {0.64368124367773, 0.0310197115799463},
 {0.67437794314608, 0.0303522195829470},
 {0.70434324099536, 0.0295574198491978},
 {0.73345145237548, 0.0286386460502016},
 {0.76158048736112, 0.0275997518499921},
 {0.78861236304199, 0.0264450947425968},
 {0.81443369838826, 0.0251795177769272},
 {0.83893618981633, 0.0238083292462452},
 {0.86201706546191, 0.0223372804283471},
 {0.88357951625787, 0.0207725414717324},
 {0.90353310201472, 0.0191206755329154},
 {0.92179413081220, 0.0173886112823852},
 {0.93828601013712, 0.0155836139164012},
 {0.95293956835778, 0.0137132548541785},
 {0.96569334535328, 0.0117853804196622},
 {0.97649385158022, 0.0098080802286778},
 {0.98529579627312, 0.0077896578614719},
 {0.99206229186141, 0.0057386172896173},
 {0.99676508613318, 0.00366377695063816},
 {0.99938550362621, 0.00157667302615292}
 };

  for (int i=0;i<48;i++)
  for (int j=0;j<2;j++)
    Qi[i*2+j] = Q[i][j];
  return;
}

void sixty_four_point_quad(double* Qi)
{
  double Q[64][2] = {
 {0.00034747913211, 0.00089164036084820},
 {0.00182994161402, 0.00207351663028172},
 {0.00449331426163, 0.00325222898448918},
 {0.00833187305769, 0.00442337991318209},
 {0.01333658610504, 0.0055840697300655},
 {0.01949560017397, 0.0067315239483606},
 {0.02679431257080, 0.0078630152380124},
 {0.03521541393403, 0.0089758578878487},
 {0.04473893146075, 0.0100674115767662},
 {0.05534227700244, 0.0111350869041917},
 {0.06700030092295, 0.0121763512843554},
 {0.07968535187371, 0.0131887348575273},
 {0.09336734243860, 0.0141698363071312},
 {0.10801382052833, 0.0151173285362019},
 {0.12359004636973, 0.0160289641774261},
 {0.14005907491419, 0.0169025809185709},
 {0.15738184347288, 0.0177361066284413},
 {0.17551726437267, 0.0185275642701201},
 {0.19442232241380, 0.0192750765893078},
 {0.21405217689868, 0.0199768705663602},
 {0.23436026799005, 0.0206312816213118},
 {0.25529842714647, 0.0212367575618268},
 {0.27681699137327, 0.0217918622646617},
 {0.29886492101800, 0.0222952790818783},
 {0.32138992083117, 0.0227458139637091},
 {0.34433856400489, 0.0231423982906572},
 {0.36765641889562, 0.0234840914081050},
 {0.39128817813000, 0.0237700828574152},
 {0.41517778978800, 0.0239996942982292},
 {0.43926859035194, 0.0241723811174015},
 {0.46350343910610, 0.0242877337207517},
 {0.48782485366829, 0.0243454785045699},
 {0.51217514633171, 0.0243454785045699},
 {0.53649656089390, 0.0242877337207517},
 {0.56073140964806, 0.0241723811174015},
 {0.58482221021200, 0.0239996942982292},
 {0.60871182187000, 0.0237700828574152},
 {0.63234358110438, 0.0234840914081050},
 {0.65566143599511, 0.0231423982906572},
 {0.67861007916883, 0.0227458139637091},
 {0.70113507898200, 0.0222952790818784},
 {0.72318300862673, 0.0217918622646617},
 {0.74470157285353, 0.0212367575618268},
 {0.76563973200995, 0.0206312816213118},
 {0.78594782310132, 0.0199768705663602},
 {0.80557767758620, 0.0192750765893078},
 {0.82448273562733, 0.0185275642701200},
 {0.84261815652712, 0.0177361066284412},
 {0.85994092508581, 0.0169025809185708},
 {0.87640995363027, 0.0160289641774258},
 {0.89198617947167, 0.0151173285362012},
 {0.90663265756140, 0.0141698363071301},
 {0.92031464812629, 0.0131887348575273},
 {0.93299969907705, 0.0121763512843584},
 {0.94465772299756, 0.0111350869041916},
 {0.95526106853925, 0.0100674115767651},
 {0.96478458606597, 0.0089758578878487},
 {0.97320568742920, 0.0078630152380124},
 {0.98050439982603, 0.0067315239483593},
 {0.98666341389496, 0.0055840697300656},
 {0.99166812694231, 0.00442337991318197},
 {0.99550668573837, 0.00325222898448924},
 {0.99817005838598, 0.00207351663028123},
 {0.99965252086789, 0.00089164036084822}
 };

  for (int i=0;i<64;i++)
  for (int j=0;j<2;j++)
    Qi[i*2+j] = Q[i][j];
}

void one_twenty_eight_point_quad(double* Qi)
{
  double Q[128][2] = {
 {0.00008755602643, 0.000224690480146045},
 {0.00046127001131, 0.00052290633967017},
 {0.00113337568724, 0.00082125150933457},
 {0.00210362073251, 0.00111914421548131},
 {0.00337144354989, 0.00141637573572901},
 {0.00493609075413, 0.00171276302045510},
 {0.00679662863771, 0.00200812749186972},
 {0.00895194578214, 0.00230229212835148},
 {0.01140075426805, 0.00259508091633815},
 {0.01414159062643, 0.00288631877143369},
 {0.01717281678402, 0.00317583158085367},
 {0.02049262107315, 0.00346344628344941},
 {0.02409901932937, 0.00374899096281732},
 {0.02798985608489, 0.00403229494524625},
 {0.03216280586104, 0.00431318889931021},
 {0.03661537456053, 0.00459150493583150},
 {0.04134490095952, 0.00486707670750404},
 {0.04634855829912, 0.0051397395079165},
 {0.05162335597542, 0.0054093303697518},
 {0.05716614132730, 0.0056756881620404},
 {0.06297360152098, 0.0059386536863702},
 {0.06904226553023, 0.0061980697719755},
 {0.07536850621102, 0.0064537813696337},
 {0.08194854246955, 0.0067056356443082},
 {0.08877844152218, 0.0069534820664760},
 {0.09585412124604, 0.0071971725020834},
 {0.10317135261890, 0.0074365613010737},
 {0.11072576224679, 0.0076715053844326},
 {0.11851283497795, 0.0079018643296997},
 {0.12652791660147, 0.0081275004548926},
 {0.13476621662905, 0.0083482789007946},
 {0.14322281115821, 0.0085640677115557},
 {0.15189264581524, 0.0087747379135589},
 {0.16077053877614, 0.0089801635925043},
 {0.16985118386368, 0.0091802219686657},
 {0.17912915371885, 0.0093747934702724},
 {0.18859890304471, 0.0095637618049755},
 {0.19825477192073, 0.0097470140293533},
 {0.20809098918562, 0.0099244406164154},
 {0.21810167588669, 0.0100959355210650},
 {0.22828084879359, 0.0102613962434800},
 {0.23862242397441, 0.0104207238903756},
 {0.24912022043193, 0.0105738232341107},
 {0.25976796379791, 0.0107206027696042},
 {0.27055929008322, 0.0108609747690260},
 {0.28148774948145, 0.0109948553342302},
 {0.29254681022386, 0.0111221644468999},
 {0.30372986248337, 0.0112428260163725},
 {0.31503022232507, 0.0113567679251182},
 {0.32644113570118, 0.0114639220718434},
 {0.33795578248779, 0.0115642244121935},
 {0.34956728056116, 0.0116576149970314},
 {0.36126868991105, 0.0117440380082680},
 {0.37305301678865, 0.0118234417922238},
 {0.38491321788667, 0.0118957788905017},
 {0.39684220454896, 0.0119610060683517},
 {0.40883284700733, 0.0120190843405120},
 {0.42087797864289, 0.0120699789945096},
 {0.43297040026941, 0.0121136596114076},
 {0.44510288443618, 0.0121501000839859},
 {0.45726817974774, 0.0121792786323453},
 {0.46945901519793, 0.0122011778169248},
 {0.48166810451563, 0.0122157845489250},
 {0.49388815051969, 0.0122230900981313},
 {0.50611184948031, 0.0122230900981313},
 {0.51833189548437, 0.0122157845489250},
 {0.53054098480207, 0.0122011778169248},
 {0.54273182025226, 0.0121792786323453},
 {0.55489711556382, 0.0121501000839859},
 {0.56702959973059, 0.0121136596114076},
 {0.57912202135711, 0.0120699789945096},
 {0.59116715299267, 0.0120190843405120},
 {0.60315779545104, 0.0119610060683517},
 {0.61508678211333, 0.0118957788905017},
 {0.62694698321135, 0.0118234417922238},
 {0.63873131008895, 0.0117440380082680},
 {0.65043271943884, 0.0116576149970314},
 {0.66204421751221, 0.0115642244121935},
 {0.67355886429882, 0.0114639220718434},
 {0.68496977767493, 0.0113567679251182},
 {0.69627013751663, 0.0112428260163725},
 {0.70745318977614, 0.0111221644468999},
 {0.71851225051855, 0.0109948553342304},
 {0.72944070991678, 0.0108609747690260},
 {0.74023203620209, 0.0107206027696042},
 {0.75087977956807, 0.0105738232341107},
 {0.76137757602559, 0.0104207238903756},
 {0.77171915120641, 0.0102613962434800},
 {0.78189832411331, 0.0100959355210650},
 {0.79190901081438, 0.0099244406164154},
 {0.80174522807927, 0.0097470140293533},
 {0.81140109695529, 0.0095637618049755},
 {0.82087084628115, 0.0093747934702724},
 {0.83014881613632, 0.0091802219686657},
 {0.83922946122386, 0.0089801635925043},
 {0.84810735418476, 0.0087747379135590},
 {0.85677718884179, 0.0085640677115557},
 {0.86523378337095, 0.0083482789007947},
 {0.87347208339853, 0.0081275004548926},
 {0.88148716502205, 0.0079018643296998},
 {0.88927423775321, 0.0076715053844326},
 {0.89682864738110, 0.0074365613010738},
 {0.90414587875396, 0.0071971725020834},
 {0.91122155847782, 0.0069534820664761},
 {0.91805145753045, 0.0067056356443082},
 {0.92463149378898, 0.0064537813696338},
 {0.93095773446977, 0.0061980697719755},
 {0.93702639847902, 0.0059386536863703},
 {0.94283385867270, 0.0056756881620402},
 {0.94837664402458, 0.0054093303697515},
 {0.95365144170088, 0.0051397395079161},
 {0.95865509904048, 0.00486707670750340},
 {0.96338462543947, 0.00459150493583044},
 {0.96783719413896, 0.00431318889930840},
 {0.97201014391511, 0.00403229494524596},
 {0.97590098067063, 0.00374899096281735},
 {0.97950737892685, 0.00346344628344941},
 {0.98282718321598, 0.00317583158085359},
 {0.98585840937357, 0.00288631877143286},
 {0.98859924573195, 0.00259508091633831},
 {0.99104805421786, 0.00230229212835257},
 {0.99320337136229, 0.00200812749186930},
 {0.99506390924587, 0.00171276302045511},
 {0.99662855645011, 0.00141637573573044},
 {0.99789637926749, 0.00111914421548128},
 {0.99886662431276, 0.00082125150933469},
 {0.99953872998869, 0.00052290633967017},
 {0.99991244397357, 0.000224690480146046}
 };

  for (int i=0;i<128;i++)
  for (int j=0;j<2;j++)
    Qi[i*2+j] = Q[i][j];
}

void get_quad(int npts, double* Qi)
{
  if (npts<1) { printf("\n ERROR: npts in get_quad less than one \n"); exit(-1); }
  if (npts==1)
  {
    Qi[0] = 0.5;
    Qi[1] = 1.;
    return;
  }
  else if (npts==2)
    return two_point_quad(Qi);
  else if (npts==3)
    return three_point_quad(Qi);
  else if (npts==4)
    return four_point_quad(Qi);
  else if (npts==5)
    return five_point_quad(Qi);
  else if (npts==6)
    return six_point_quad(Qi);
  else if (npts==8)
    return eight_point_quad(Qi);
  else if (npts==10)
    return ten_point_quad(Qi);
  else if (npts==12)
    return twelve_point_quad(Qi);
  else if (npts==16)
    return sixteen_point_quad(Qi);
  else if (npts==24)
    return twenty_four_point_quad(Qi);
  else if (npts==32)
    return thirty_two_point_quad(Qi);
  else if (npts==48)
    return forty_eight_point_quad(Qi);
  else if (npts==64)
    return sixty_four_point_quad(Qi);
  else if (npts==128)
    return one_twenty_eight_point_quad(Qi);

  printf("\n ERROR: quadrature %2i not available. using %2i instead \n",npts,npts-1);
  for (int j=2*(npts-1);j<2*npts;j++)
    Qi[j] = 0.;
  return get_quad(npts-1,Qi);
}

void quad_grid_munuphi(int tid, int wb, int nb, const int nptsx, const int nptsy, const int nptsz, int qosp, double a, double* Qx, double* Qy, double* Qz, int gs, int offset, double* gridm, double* grid, double* wt)
{
  if (offset>=gs) return;

 //Qx: quad pts over first DOF
 //Qy: quad pts over second DOF
 //Qz: quad pts over third DOF

  double a3 = a*a*a;
  int qos = nptsx*nptsy*nptsz;

  int gsq = qos*gs;
  if (offset>0)
    gsq = (qos*8 + offset*qosp);
  if (gsq%nb>0) { printf(" WARNING: can't divide nb \n"); exit(-1); }
  gsq /= nb;

  int nptsyz = nptsy*nptsz;

  //printf("  qos/p: %2i %2i  offset: %6i  gsq(quad_grid): %6i  wb: %i  nb: %i \n",qos,qosp,offset,gsq,wb,nb);

 #pragma acc parallel loop present(Qx[0:2*nptsx],Qy[0:2*nptsy],Qz[0:2*nptsz],gridm[0:6*gs],grid[0:6*gsq],wt[0:gsq])// async(tid+1)
  for (int n=offset;n<gs;n++)
  if (n%nb==wb)
  {
    double mu   = gridm[6*n+0]; double nu  = gridm[6*n+1]; double phi  = gridm[6*n+2];
    double dmu  = gridm[6*n+3]; double dnu = gridm[6*n+4]; double dphi = gridm[6*n+5];
    double mu1  = mu-0.5*dmu;
    double nu1  = nu-0.5*dnu;
    double phi1 = phi; //was phi-0.5*dphi

    double dJ = fabs(dmu*dnu*dphi);

    int n1 = (n-offset)/nb;
    int ip = offset*qosp/nb;
    int i0 = ip + n1*qos;
    //printf(" n: %3i %3i  ip/0: %5i %5i \n",n,n1,ip,i0);

   #pragma acc loop independent
    for (int i=0;i<nptsx;i++)
    {
      double qm = Qx[2*i+0];
      double wm = Qx[2*i+1];
      double mu = mu1+qm*dmu;

      double sinhm = sinh(mu);
      double coshm = cosh(mu);

     #pragma acc loop independent
      for (int j=0;j<nptsy;j++)
      {
        double qn = Qy[2*j+0];
        double wn = Qy[2*j+1];
        double nu = nu1+qn*dnu;

        double sinn = sin(nu);
        double cosn = cos(nu);

       #pragma acc loop independent
        for (int k=0;k<nptsz;k++)
        {
          double qp = Qz[2*k+0];
          double wp = Qz[2*k+1];
          double phi = phi1+qp*dphi;

          int i1 = i0+i*nptsyz+j*nptsz+k; //index for xyz grid pt

          double wtv = a3*sinhm*sinn*(sinhm*sinhm+sinn*sinn)*dJ;
          wt[i1] = wm*wn*wp*wtv;

          double x = a*sinhm*sinn*cos(phi);
          double y = a*sinhm*sinn*sin(phi);
          double z = a*coshm*cosn;

          grid[6*i1+0] = x;
          grid[6*i1+1] = y;
          grid[6*i1+2] = z-a;

        } //loop over 3rd DOF
      } //loop over 2nd DOF
    } //loop over 1st DOF

  } //loop over outer grid

  if (tid<0)
  {
    #pragma acc wait
  }

  return;
}

void quad_grid_munuphi(int tid, const int nptsx, const int nptsy, const int nptsz, int qosp, double a, double* Qx, double* Qy, double* Qz, int gs, int offset, double* gridm, double* grid, double* wt)
{
  if (offset>=gs) return;

 //Qx: quad pts over first DOF
 //Qy: quad pts over second DOF
 //Qz: quad pts over third DOF

  double a3 = a*a*a;
  int qos = nptsx*nptsy*nptsz;
  int gsq = qos*gs;
  if (offset>0)
    gsq = qos*8 + offset*qosp;
  int nptsyz = nptsy*nptsz;

  //printf("  gsq(quad_grid): %6i \n",gsq);

 #pragma acc parallel loop present(Qx[0:2*nptsx],Qy[0:2*nptsy],Qz[0:2*nptsz],gridm[0:6*gs],grid[0:6*gsq],wt[0:gsq])// async(tid+1)
  for (int n=offset;n<gs;n++)
  {
    double mu   = gridm[6*n+0]; double nu  = gridm[6*n+1]; double phi  = gridm[6*n+2];
    double dmu  = gridm[6*n+3]; double dnu = gridm[6*n+4]; double dphi = gridm[6*n+5];
    double mu1  = mu-0.5*dmu;
    double nu1  = nu-0.5*dnu;
    double phi1 = phi; //was phi-0.5*dphi

    double dJ = fabs(dmu*dnu*dphi);

    int i0 = offset*qosp + (n-offset)*qos;

   #pragma acc loop independent
    for (int i=0;i<nptsx;i++)
    {
      double qm = Qx[2*i+0];
      double wm = Qx[2*i+1];
      double mu = mu1+qm*dmu;

      double sinhm = sinh(mu);
      double coshm = cosh(mu);

     #pragma acc loop independent
      for (int j=0;j<nptsy;j++)
      {
        double qn = Qy[2*j+0];
        double wn = Qy[2*j+1];
        double nu = nu1+qn*dnu;

        double sinn = sin(nu);
        double cosn = cos(nu);

       #pragma acc loop independent
        for (int k=0;k<nptsz;k++)
        {
          double qp = Qz[2*k+0];
          double wp = Qz[2*k+1];
          double phi = phi1+qp*dphi;

          int i1 = i0+i*nptsyz+j*nptsz+k; //index for xyz grid pt

          double wtv = a3*sinhm*sinn*(sinhm*sinhm+sinn*sinn)*dJ;
          wt[i1] = wm*wn*wp*wtv;

          double x = a*sinhm*sinn*cos(phi);
          double y = a*sinhm*sinn*sin(phi);
          double z = a*coshm*cosn;

          grid[6*i1+0] = x;
          grid[6*i1+1] = y;
          grid[6*i1+2] = z-a;

        } //loop over 3rd DOF
      } //loop over 2nd DOF
    } //loop over 1st DOF

  } //loop over outer grid

  if (tid<0)
  {
    #pragma acc wait
  }

  return;
}

void quad_grid_munu(const int nptsx, const int nptsy, double a, double* Qx, double* Qy, int gs, double* gridm, double* grid, double* wt)
{
 //Qx: quad pts over first DOF
 //Qy: quad pts over second DOF

  double a3 = a*a*a;
  int qos = nptsx*nptsy;
  int gsq = qos*gs;

 #pragma acc parallel loop present(Qx[2*nptsx],Qy[2*nptsy],gridm[0:6*gs],grid[0:6*gsq],wt[0:gsq])
  for (int n=0;n<gs;n++)
  {
    double mu = gridm[6*n+0]; double nu = gridm[6*n+1]; double phi = gridm[6*n+2];
    double dmu = gridm[6*n+3]; double dnu = gridm[6*n+4];
    double mu1 = mu-0.5*dmu;
    double nu1 = nu-0.5*dnu;

    double dJ = fabs(dmu*dnu);

    int i0 = n*qos;

   #pragma acc loop independent
    for (int i=0;i<nptsx;i++)
    {
      double qm = Qx[2*i+0];
      double wm = Qx[2*i+1];
      double mu = mu1+qm*dmu;

      double sinhm = sinh(mu);
      double coshm = cosh(mu);

     #pragma acc loop independent
      for (int j=0;j<nptsy;j++)
      {
        double qn = Qy[2*j+0];
        double wn = Qy[2*j+1];
        double nu = nu1+qn*dnu;

        double sinn = sin(nu);
        double cosn = cos(nu);

        int i1 = i0+i*nptsy+j; //index for xyz grid pt

        double wtv = a3*sinhm*sinn*(sinhm*sinhm+sinn*sinn)*dJ;
        wt[i1] = wm*wn*wtv;

        double x = a*sinhm*sinn*cos(phi);
        double y = a*sinhm*sinn*sin(phi);
        double z = a*coshm*cosn;

        grid[6*i1+0] = x;
        grid[6*i1+1] = y;
        grid[6*i1+2] = z-a;

      } //loop over 2nd DOF
    } //loop over 1st DOF

  } //loop over outer grid

  return;
}

void quad_grid_munu_one_pt(const int nptsx, const int nptsy, double a, const double mu1, const double dmu, const double nu1, const double dnu, const double phi, 
                    double* Qx, double* Qy, double* grid, double* wt)
{
 //Qx: quad pts over first DOF
 //Qy: quad pts over second DOF

  //printf(" quad_grid_munu ->  mu1/dmu: %8.5f %8.5f \n",mu1,dmu,nu1,dnu);

  double a3 = a*a*a;
  int gsq = nptsx*nptsy;

  double dJ = fabs(dmu*dnu);

  int i0 = 0; //update me to n*gsq

 #pragma acc parallel loop present(Qx[2*nptsx],Qy[2*nptsy],grid[0:6*gsq],wt[0:gsq])
  for (int i=0;i<nptsx;i++)
  {
    double qm = Qx[2*i+0];
    double wm = Qx[2*i+1];
    double mu = mu1+qm*dmu;

    double sinhm = sinh(mu);
    double coshm = cosh(mu);

    //printf(" i: %i  mu/p/n: %8.5f %8.5f %8.5f \n",i,mu,mup,mun);

   #pragma acc loop
    for (int j=0;j<nptsy;j++)
    {
      double qn = Qy[2*j+0];
      double wn = Qy[2*j+1];
      double nu = nu1+qn*dnu;

      double sinn = sin(nu);
      double cosn = cos(nu);

      int i1 = i0+i*nptsy+j; //index for xyz grid pt

      double wtv = a3*sinhm*sinn*(sinhm*sinhm+sinn*sinn)*dJ;
     //p/n get left/right edges, but center is off
      //double wtv = a3*ps_dV(mup,mun,nup,nun);

      wt[i1] = wm*wn*wtv;

      double x = a*sinhm*sinn*cos(phi);
      double y = a*sinhm*sinn*sin(phi);
      double z = a*coshm*cosn;

      grid[6*i1+0] = x;
      grid[6*i1+1] = y;
      grid[6*i1+2] = z-a;

      //Qmn[ix+0] = mu; Qmn[ix+1] = nu; Qmn[ix+2] = wm*wn*wtv;

    } //loop over 2nd DOF
  } //loop over 1st DOF

  return;
}


void test_2d_quad(int npts)
{
  int npts2 = npts*npts;

  double* Qi = new double[2*npts];
  get_quad(npts,Qi);

  for (int j=0;j<npts;j++)
    printf(" Qi.  %8.5f %8.5f \n",Qi[2*j+0],Qi[2*j+1]);
  double* gridmq = new double[npts2*3];

  int nq = 0;
  for (int j=0;j<npts;j++)
  for (int k=0;k<npts;k++)
  {
    double x = Qi[2*j];
    double y = Qi[2*k];
    double wx = Qi[2*j+1];
    double wy = Qi[2*k+1];

    gridmq[3*nq+0] = x;
    gridmq[3*nq+1] = y;
    gridmq[3*nq+2] = wx*wy;
    nq++;
  }

  printf(" gridmq: \n");
  for (int j=0;j<npts2;j++)
    printf(" %8.5f %8.5f   wt: %8.5f \n",gridmq[3*j+0],gridmq[3*j+1],gridmq[3*j+2]);

  double wt = 0.;
  for (int j=0;j<npts2;j++)
    wt += gridmq[3*j+2];
  printf("  total weight: %12.10f \n",wt);

  delete [] Qi;
  delete [] gridmq;

  return;
}
