# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CI

on: [push]
  # push:
  #   branches:
  #   - 5-add-cmake-test-of-compilation-and-basic-usage
  # pull_request:
  #   branches:
  #   - 5-add-cmake-test-of-compilation-and-basic-usage
  
# env:
#   # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
#   BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: gpu
    # runs-on: self-hosted
    
    steps:
    - uses: actions/checkout@v4
    - uses: prefix-dev/setup-pixi@v0.8.1
      with:
        pixi-version: v0.41.3
        log-level: v
        # cache: true
      continue-on-error: true
    - name: Test GitHub Actions on GPU runner attempt 2
      run: echo 'Succeeded at running GitHub action on a GPU!'



    # - name: Install Open MPI
    #   run: |
    #     sudo apt update
    #     sudo apt install -y libopenmpi-dev openmpi-bin
    #     echo "OPENMPI_DIR=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV
    #     echo "PATH=$PATH:/usr/lib/x86_64-linux-gnu/bin" >> $GITHUB_ENV

    # # Hopefully removing gcc will force nvhpc to use/reinstall a compatible version?
    # - name: Remove GCC?
    #   run: |
    #     sudo apt remove gcc

    # - name: Install NVIDIA HPC SDK (PGI Compiler)
    #   run: |
    #     wget https://developer.download.nvidia.com/hpc-sdk/20.7/nvhpc-20-7_20.7_amd64.deb
    #     wget https://developer.download.nvidia.com/hpc-sdk/20.7/nvhpc-2020_20.7_amd64.deb
    #     wget https://developer.download.nvidia.com/hpc-sdk/20.7/nvhpc-20-7-cuda-multi_20.7_amd64.deb
    #     sudo apt install ./nvhpc-20-7_20.7_amd64.deb ./nvhpc-2020_20.7_amd64.deb ./nvhpc-20-7-cuda-multi_20.7_amd64.deb
    #     echo "PATH=/opt/nvidia/hpc_sdk/Linux_x86_64/20.7/compilers/bin:$PATH" >> $GITHUB_ENV
    #     echo "MANPATH=/opt/nvidia/hpc_sdk/Linux_x86_64/20.7/compilers/man:$MANPATH" >> $GITHUB_ENV
      
        
    # - name: Verify Open MPI and PGI Installation
    #   run: |
    #     ompi_info --version
    #     pgcc --version
    #     gcc --version
    #     echo ${{env.OPENMPI_DIR}}
    #     test -d "${OPENMPI_DIR}"
    
    # - name: Configure CMake
        
    #   # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
    #   # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
    #   run: |
    #     export CC=pgcc
    #     export CXX=pgc++
    #     cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DOPENMPI_DIR=${{env.OPENMPI_DIR}} -DCMAKE_C_FLAGS="-acc -ta=tesla:ccall" -DCMAKE_CXX_FLAGS="-acc -ta=tesla:ccall"

    # - name: Build
    #   # Build your program with the given configuration
    #   run: |
    #     export CC=pgcc
    #     export CXX=pgc++
    #     cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    # - name: Test
    #   working-directory: ${{github.workspace}}/build
    #   # Execute tests defined by the CMake configuration.
    #   # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #   run: ctest -C ${{env.BUILD_TYPE}}
